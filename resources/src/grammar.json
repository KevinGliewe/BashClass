{
    "START": ["#start# START_BODY #end#"],
    "START_BODY": ["EPSILON","CLASS_DEC START_BODY","FUNCTION_DEC START_BODY","VARIABLE_DEC START_BODY","BASH_DEC START_BODY"],

    "CLASS_DEC": ["#newKey# CLASS #startClass# CLASS_NAME #className# OPEN_CUR CLASS_BODY CLOSE_CUR #endClass#"],
    "CLASS" : ["'class'"],
    "CLASS_NAME" : ["'identifier'"],
    "CLASS_BODY" : ["EPSILON","VARIABLE_DEC CLASS_BODY","FUNCTION_DEC CLASS_BODY"],
    
    "FUNCTION_DEC" : ["#newKey# FUNCTION #startFunction# FUNCTION_TYPE #functionType# FUNCTION_NAME #functionName# OPEN_PAR FUNCTION_PARAM_DEC CLOSE_PAR OPEN_CUR FUNCTION_BODY CLOSE_CUR #endFunction#"],
    "FUNCTION": ["'function'"],
    "FUNCTION_TYPE" : ["'identifier'","'int_type'","'boolean_type'","'char_type'","'string_type'","'void_type'","'any_type'"],
    "FUNCTION_NAME" : ["'identifier'"],
    "FUNCTION_BODY" : ["EPSILON","VARIABLE_DEC FUNCTION_BODY","VAR_ASSIGN_OR_FUNC_CALL FUNCTION_BODY","STATEMENT FUNCTION_BODY","RETURN_DEC FUNCTION_BODY","BASH_DEC FUNCTION_BODY"],
    "FUNCTION_PARAM_DEC" : ["EPSILON","FUNCTION_PARAM_A"],
    "FUNCTION_PARAM_A" : ["#newKey# VARIABLE #startParam# VARIABLE_TYPE #paramType# VARIABLE_NAME #paramName# #endParam# FUNCTION_PARAM_B"],
    "FUNCTION_PARAM_B" : ["EPSILON","COMMA FUNCTION_PARAM_A"],

    "BASH_DEC" : ["BASH_SUB #bashCode#", "BASH_INLINE #bashCode#", "BASH_BLOCK #bashCode#"],

    "VAR_ASSIGN_OR_FUNC_CALL" : ["#newKey# #startOuterCall# THIS_OPT VAR_ASSIGN_OR_FUNC_CALL_A #endOuterCall#"],
    "VAR_ASSIGN_OR_FUNC_CALL_A" : ["IDENTIFIER VAR_ASSIGN_OR_FUNC_CALL_B"],
    "VAR_ASSIGN_OR_FUNC_CALL_B" : ["#varChainAccess# ASSIGN EXPR_DEC SEMICOLON #varAssign#","#varChainAccess# DOT VAR_ASSIGN_OR_FUNC_CALL_A","#functionChainCall# IDENTIFIER_FUNCTION_CALL VAR_ASSIGN_OR_FUNC_CALL_C"],
    "VAR_ASSIGN_OR_FUNC_CALL_C" : ["SEMICOLON #functionExec#","DOT VAR_ASSIGN_OR_FUNC_CALL_A"],

    "THIS_OPT" : ["THIS #thisChainAccess# DOT","EPSILON"],
    "THIS" : ["'this_ref'"],
    
    "VARIABLE_DEC" : ["#newKey# VARIABLE #startVar# VARIABLE_TYPE #varType# VARIABLE_NAME #varName# SEMICOLON #endVar#"],
    "VARIABLE" : ["'var'"],
    "VARIABLE_TYPE" : ["'identifier'","'int_type'","'boolean_type'","'char_type'","'string_type'","'any_type'"],
    "VARIABLE_NAME" : ["'identifier'"],

    "RETURN_DEC" : ["RETURN #startReturn# EXPR_DEC #returnExpr# SEMICOLON #endReturn#"],

    "STATEMENT" : ["#newKey# IF #startIf# OPEN_PAR EXPR_DEC #ifCond# CLOSE_PAR OPEN_CUR STATEMENT_BODY CLOSE_CUR #endIf#",
                    "#newKey# WHILE #startWhile# OPEN_PAR EXPR_DEC #whileCond# CLOSE_PAR OPEN_CUR STATEMENT_BODY CLOSE_CUR #endWhile#"],
    "STATEMENT_BODY" : ["EPSILON","VARIABLE_DEC STATEMENT_BODY", "VAR_ASSIGN_OR_FUNC_CALL STATEMENT_BODY","STATEMENT STATEMENT_BODY","RETURN_DEC STATEMENT_BODY", "BASH_DEC STATEMENT_BODY"],

    "BASH_SUB" : ["'bash_sub'"],
    "BASH_INLINE" : ["'bash_inline'"],
    "BASH_BLOCK" : ["'bash_block'"],

    "RETURN" : ["'return'"],
    "IF" : ["'if'"],
    "WHILE" : ["'while'"],

    "ASSIGN" : ["'assign'"],

    "OPEN_PAR" : ["'open_parenthesis'"],
    "CLOSE_PAR" : ["'close_parenthesis'"],

    "OPEN_CUR" : ["'open_curly'"],
    "CLOSE_CUR" : ["'close_curly'"],

    "COMMA" : ["'comma'"],
    "SEMICOLON" : ["'semicolon'"],
    "DOT" : ["'dot'"],

    "EXPR_DEC" : ["#startExpr# EXPR_A #endExpr#"],
    "EXPR_A" : ["EXPR_C EXPR_B"],
    "EXPR_B" : ["EPSILON","OP_GROUP_A #putOp# EXPR_C #createExpr# EXPR_B"],
    "EXPR_C" : ["EXPR_E EXPR_D"],
    "EXPR_D" : ["EPSILON","OP_GROUP_B #putOp# EXPR_E #createExpr# EXPR_D"],
    "EXPR_E" : ["EXPR_G EXPR_F"],
    "EXPR_F" : ["EPSILON","OP_GROUP_C #putOp# EXPR_G #createExpr# EXPR_F"],
    "EXPR_G" : ["EXPR_I EXPR_H"],
    "EXPR_H" : ["EPSILON","OP_GROUP_D #putOp# EXPR_I #createExpr# EXPR_H"],
    "EXPR_I" : ["EXPR_K EXPR_J"],
    "EXPR_J" : ["EPSILON","OP_GROUP_E #putOp# EXPR_K #createExpr# EXPR_J"],
    "EXPR_K" : ["EXPR_M EXPR_L"],
    "EXPR_L" : ["EPSILON","OP_GROUP_F #putOp# EXPR_M #createExpr# EXPR_L"],
    "EXPR_M" : ["EXPR_O EXPR_N"],
    "EXPR_N" : ["EPSILON","OP_GROUP_G #putOp# EXPR_O #createExpr# EXPR_N"],
    "EXPR_O" : ["EXPR_Q EXPR_P"],
    "EXPR_P" : ["EPSILON","OP_GROUP_H #putOp# EXPR_Q #createExpr# EXPR_P"],
    "EXPR_Q" : ["EXPR_S EXPR_R"],
    "EXPR_R" : ["EPSILON","OP_GROUP_I #putOp# EXPR_S #createExpr# EXPR_R"],
    "EXPR_S" : ["EXPR_U EXPR_T"],
    "EXPR_T" : ["EPSILON","OP_GROUP_J #putOp# EXPR_U #createExpr# EXPR_T"],
    "EXPR_U" : ["EXPR_W EXPR_V"],
    "EXPR_V" : ["EPSILON","OP_GROUP_K #putOp# EXPR_W #createExpr# EXPR_V"],
    "EXPR_W" : ["EXPR_Y EXPR_X"],
    "EXPR_X" : ["EPSILON","OP_GROUP_L #putOp# EXPR_Y #createExpr# EXPR_X"],
    "EXPR_Y" : ["OPEN_PAR EXPR_A CLOSE_PAR","ARITH_ID"],

    "ARITH_ID" : [
        "'integer' #tokenUse#",
        "'character' #tokenUse#",
        "'truefalse' #tokenUse#",
        "'string' #tokenUse#",
        "BASH_SUB #tokenUse#",
        "ARITH_VAR_OR_FUNC_CALL"
        ],

    "ARITH_VAR_OR_FUNC_CALL" : ["#startInnerCall# ARITH_VAR_OR_FUNC_CALL_A #endInnerCall#"],
    "ARITH_VAR_OR_FUNC_CALL_A" : ["THIS ARITH_VAR_OR_FUNC_CALL_E", "ARITH_VAR_OR_FUNC_CALL_B"],
    "ARITH_VAR_OR_FUNC_CALL_B" : ["IDENTIFIER ARITH_VAR_OR_FUNC_CALL_C"],
    "ARITH_VAR_OR_FUNC_CALL_C" : ["#varAccess# EPSILON","#varChainAccess# DOT ARITH_VAR_OR_FUNC_CALL_B","#functionChainCall# IDENTIFIER_FUNCTION_CALL ARITH_VAR_OR_FUNC_CALL_D"],
    "ARITH_VAR_OR_FUNC_CALL_D" : ["#functionCall# EPSILON","DOT ARITH_VAR_OR_FUNC_CALL_B"],
    "ARITH_VAR_OR_FUNC_CALL_E" : ["#thisChainAccess# DOT ARITH_VAR_OR_FUNC_CALL_B","#thisAccess# EPSILON"],

    "OP_GROUP_A" : ["'logical_or'"],
    "OP_GROUP_B" : ["'logical_and'"],
    "OP_GROUP_C" : ["'bit_or'"],
    "OP_GROUP_D" : ["'bit_xor'"],
    "OP_GROUP_E" : ["'bit_and'"],
    "OP_GROUP_F" : ["'is_equal'","'is_not_equal'"],
    "OP_GROUP_G" : ["'less_than'","'greater_than'","'less_equal_than'","'greater_equal_than'"],
    "OP_GROUP_H" : ["'left_shift'","'right_shift'"],
    "OP_GROUP_I" : ["'plus'","'minus'"],
    "OP_GROUP_J" : ["'multiply'","'divide'","'mod'"],
    "OP_GROUP_K" : ["'exponential'"],
    "OP_GROUP_L" : ["'not'"],

    "IDENTIFIER" : ["'identifier'"],
    "IDENTIFIER_FUNCTION_CALL" : ["OPEN_PAR #startArgument# IDENTIFIER_FUNCTION_ARG_DEC #endArgument# CLOSE_PAR"],
    "IDENTIFIER_FUNCTION_ARG_DEC" : ["EPSILON", "IDENTIFIER_FUNCTION_ARG_A"],
    "IDENTIFIER_FUNCTION_ARG_A" : ["EXPR_DEC #setArgument# IDENTIFIER_FUNCTION_ARG_B"],
    "IDENTIFIER_FUNCTION_ARG_B" : ["EPSILON","COMMA IDENTIFIER_FUNCTION_ARG_A"]
}
